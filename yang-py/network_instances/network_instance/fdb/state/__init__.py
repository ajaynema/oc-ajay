# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the FDB
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_learning','__mac_aging_time','__maximum_entries','__anycast_gateway_mac','__arp_proxy','__arp_suppression','__nd_proxy','__nd_suppression','__flood_unknown_unicast_supression',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_learning = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__mac_aging_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__maximum_entries = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__anycast_gateway_mac = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    self.__arp_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__arp_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__flood_unknown_unicast_supression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'state']

  def _get_mac_learning(self):
    """
    Getter method for mac_learning, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_learning (boolean)

    YANG Description: When this leaf is set to true, MAC learning is enabled for
the network instance, such that MAC addresses are learned
from ingress frames and added to the FDB.
    """
    return self.__mac_learning
      
  def _set_mac_learning(self, v, load=False):
    """
    Setter method for mac_learning, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_learning (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_learning is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_learning() directly.

    YANG Description: When this leaf is set to true, MAC learning is enabled for
the network instance, such that MAC addresses are learned
from ingress frames and added to the FDB.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_learning must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__mac_learning = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_learning(self):
    self.__mac_learning = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_mac_aging_time(self):
    """
    Getter method for mac_aging_time, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_aging_time (uint16)

    YANG Description: The number of seconds of inactivity after which the entry
in the local FDB is timed out.
    """
    return self.__mac_aging_time
      
  def _set_mac_aging_time(self, v, load=False):
    """
    Setter method for mac_aging_time, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_aging_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_aging_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_aging_time() directly.

    YANG Description: The number of seconds of inactivity after which the entry
in the local FDB is timed out.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_aging_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__mac_aging_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_aging_time(self):
    self.__mac_aging_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_maximum_entries(self):
    """
    Getter method for maximum_entries, mapped from YANG variable /network_instances/network_instance/fdb/state/maximum_entries (uint16)

    YANG Description: The maximum number of MAC address entries that should be
accepted into the FDB
    """
    return self.__maximum_entries
      
  def _set_maximum_entries(self, v, load=False):
    """
    Setter method for maximum_entries, mapped from YANG variable /network_instances/network_instance/fdb/state/maximum_entries (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_entries() directly.

    YANG Description: The maximum number of MAC address entries that should be
accepted into the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_entries must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__maximum_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_entries(self):
    self.__maximum_entries = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_anycast_gateway_mac(self):
    """
    Getter method for anycast_gateway_mac, mapped from YANG variable /network_instances/network_instance/fdb/state/anycast_gateway_mac (oc-yang:mac-address)

    YANG Description: Configure the anycast gateway MAC address that all VTEPs
use for the network instance. When a VM sends an Address
Resolution Protocol (ARP) request for the anycast gateway
IP address in a VXLAN virtual network, the VTEP responds
with the configured anycast MAC address.
    """
    return self.__anycast_gateway_mac
      
  def _set_anycast_gateway_mac(self, v, load=False):
    """
    Setter method for anycast_gateway_mac, mapped from YANG variable /network_instances/network_instance/fdb/state/anycast_gateway_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_anycast_gateway_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_anycast_gateway_mac() directly.

    YANG Description: Configure the anycast gateway MAC address that all VTEPs
use for the network instance. When a VM sends an Address
Resolution Protocol (ARP) request for the anycast gateway
IP address in a VXLAN virtual network, the VTEP responds
with the configured anycast MAC address.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """anycast_gateway_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__anycast_gateway_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_anycast_gateway_mac(self):
    self.__anycast_gateway_mac = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)


  def _get_arp_proxy(self):
    """
    Getter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_proxy (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) ARP proxy. If true
a proxy server on the network answers the
Address Resolution Protocol (ARP) queries for an
IP address that is not on that network.
    """
    return self.__arp_proxy
      
  def _set_arp_proxy(self, v, load=False):
    """
    Setter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_proxy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_proxy() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) ARP proxy. If true
a proxy server on the network answers the
Address Resolution Protocol (ARP) queries for an
IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_proxy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__arp_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_proxy(self):
    self.__arp_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_arp_suppression(self):
    """
    Getter method for arp_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) ARP suppression. If true
the  Address Resolution Protocol (ARP) queries for an
IP address that is not on that network are suppressed.
Address Resolution Protocol (ARP) suppression is a
technique used to reduce the amount of ARP broadcast
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__arp_suppression
      
  def _set_arp_suppression(self, v, load=False):
    """
    Setter method for arp_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) ARP suppression. If true
the  Address Resolution Protocol (ARP) queries for an
IP address that is not on that network are suppressed.
Address Resolution Protocol (ARP) suppression is a
technique used to reduce the amount of ARP broadcast
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__arp_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_suppression(self):
    self.__arp_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_proxy(self):
    """
    Getter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_proxy (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    return self.__nd_proxy
      
  def _set_nd_proxy(self, v, load=False):
    """
    Setter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_proxy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_proxy() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_proxy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_proxy(self):
    self.__nd_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_suppression(self):
    """
    Getter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__nd_suppression
      
  def _set_nd_suppression(self, v, load=False):
    """
    Setter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_suppression(self):
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_flood_unknown_unicast_supression(self):
    """
    Getter method for flood_unknown_unicast_supression, mapped from YANG variable /network_instances/network_instance/fdb/state/flood_unknown_unicast_supression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
Suppression. If the Unknown Unicast Flooding Suppression is on,
the unicast traffic towards an unknown host will be dropped.
    """
    return self.__flood_unknown_unicast_supression
      
  def _set_flood_unknown_unicast_supression(self, v, load=False):
    """
    Setter method for flood_unknown_unicast_supression, mapped from YANG variable /network_instances/network_instance/fdb/state/flood_unknown_unicast_supression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flood_unknown_unicast_supression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flood_unknown_unicast_supression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
Suppression. If the Unknown Unicast Flooding Suppression is on,
the unicast traffic towards an unknown host will be dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flood_unknown_unicast_supression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__flood_unknown_unicast_supression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flood_unknown_unicast_supression(self):
    self.__flood_unknown_unicast_supression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  mac_learning = __builtin__.property(_get_mac_learning)
  mac_aging_time = __builtin__.property(_get_mac_aging_time)
  maximum_entries = __builtin__.property(_get_maximum_entries)
  anycast_gateway_mac = __builtin__.property(_get_anycast_gateway_mac)
  arp_proxy = __builtin__.property(_get_arp_proxy)
  arp_suppression = __builtin__.property(_get_arp_suppression)
  nd_proxy = __builtin__.property(_get_nd_proxy)
  nd_suppression = __builtin__.property(_get_nd_suppression)
  flood_unknown_unicast_supression = __builtin__.property(_get_flood_unknown_unicast_supression)


  _pyangbind_elements = OrderedDict([('mac_learning', mac_learning), ('mac_aging_time', mac_aging_time), ('maximum_entries', maximum_entries), ('anycast_gateway_mac', anycast_gateway_mac), ('arp_proxy', arp_proxy), ('arp_suppression', arp_suppression), ('nd_proxy', nd_proxy), ('nd_suppression', nd_suppression), ('flood_unknown_unicast_supression', flood_unknown_unicast_supression), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the FDB
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_learning','__mac_aging_time','__maximum_entries','__anycast_gateway_mac','__arp_proxy','__arp_suppression','__nd_proxy','__nd_suppression','__flood_unknown_unicast_supression',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_learning = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__mac_aging_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__maximum_entries = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__anycast_gateway_mac = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    self.__arp_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__arp_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__flood_unknown_unicast_supression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'state']

  def _get_mac_learning(self):
    """
    Getter method for mac_learning, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_learning (boolean)

    YANG Description: When this leaf is set to true, MAC learning is enabled for
the network instance, such that MAC addresses are learned
from ingress frames and added to the FDB.
    """
    return self.__mac_learning
      
  def _set_mac_learning(self, v, load=False):
    """
    Setter method for mac_learning, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_learning (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_learning is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_learning() directly.

    YANG Description: When this leaf is set to true, MAC learning is enabled for
the network instance, such that MAC addresses are learned
from ingress frames and added to the FDB.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_learning must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__mac_learning = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_learning(self):
    self.__mac_learning = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_mac_aging_time(self):
    """
    Getter method for mac_aging_time, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_aging_time (uint16)

    YANG Description: The number of seconds of inactivity after which the entry
in the local FDB is timed out.
    """
    return self.__mac_aging_time
      
  def _set_mac_aging_time(self, v, load=False):
    """
    Setter method for mac_aging_time, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_aging_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_aging_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_aging_time() directly.

    YANG Description: The number of seconds of inactivity after which the entry
in the local FDB is timed out.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_aging_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__mac_aging_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_aging_time(self):
    self.__mac_aging_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_maximum_entries(self):
    """
    Getter method for maximum_entries, mapped from YANG variable /network_instances/network_instance/fdb/state/maximum_entries (uint16)

    YANG Description: The maximum number of MAC address entries that should be
accepted into the FDB
    """
    return self.__maximum_entries
      
  def _set_maximum_entries(self, v, load=False):
    """
    Setter method for maximum_entries, mapped from YANG variable /network_instances/network_instance/fdb/state/maximum_entries (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_entries() directly.

    YANG Description: The maximum number of MAC address entries that should be
accepted into the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_entries must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__maximum_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_entries(self):
    self.__maximum_entries = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_anycast_gateway_mac(self):
    """
    Getter method for anycast_gateway_mac, mapped from YANG variable /network_instances/network_instance/fdb/state/anycast_gateway_mac (oc-yang:mac-address)

    YANG Description: Configure the anycast gateway MAC address that all VTEPs
use for the network instance. When a VM sends an Address
Resolution Protocol (ARP) request for the anycast gateway
IP address in a VXLAN virtual network, the VTEP responds
with the configured anycast MAC address.
    """
    return self.__anycast_gateway_mac
      
  def _set_anycast_gateway_mac(self, v, load=False):
    """
    Setter method for anycast_gateway_mac, mapped from YANG variable /network_instances/network_instance/fdb/state/anycast_gateway_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_anycast_gateway_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_anycast_gateway_mac() directly.

    YANG Description: Configure the anycast gateway MAC address that all VTEPs
use for the network instance. When a VM sends an Address
Resolution Protocol (ARP) request for the anycast gateway
IP address in a VXLAN virtual network, the VTEP responds
with the configured anycast MAC address.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """anycast_gateway_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__anycast_gateway_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_anycast_gateway_mac(self):
    self.__anycast_gateway_mac = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)


  def _get_arp_proxy(self):
    """
    Getter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_proxy (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) ARP proxy. If true
a proxy server on the network answers the
Address Resolution Protocol (ARP) queries for an
IP address that is not on that network.
    """
    return self.__arp_proxy
      
  def _set_arp_proxy(self, v, load=False):
    """
    Setter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_proxy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_proxy() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) ARP proxy. If true
a proxy server on the network answers the
Address Resolution Protocol (ARP) queries for an
IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_proxy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__arp_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_proxy(self):
    self.__arp_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_arp_suppression(self):
    """
    Getter method for arp_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) ARP suppression. If true
the  Address Resolution Protocol (ARP) queries for an
IP address that is not on that network are suppressed.
Address Resolution Protocol (ARP) suppression is a
technique used to reduce the amount of ARP broadcast
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__arp_suppression
      
  def _set_arp_suppression(self, v, load=False):
    """
    Setter method for arp_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) ARP suppression. If true
the  Address Resolution Protocol (ARP) queries for an
IP address that is not on that network are suppressed.
Address Resolution Protocol (ARP) suppression is a
technique used to reduce the amount of ARP broadcast
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__arp_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_suppression(self):
    self.__arp_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_proxy(self):
    """
    Getter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_proxy (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    return self.__nd_proxy
      
  def _set_nd_proxy(self, v, load=False):
    """
    Setter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_proxy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_proxy() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_proxy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_proxy(self):
    self.__nd_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_suppression(self):
    """
    Getter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__nd_suppression
      
  def _set_nd_suppression(self, v, load=False):
    """
    Setter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_suppression(self):
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_flood_unknown_unicast_supression(self):
    """
    Getter method for flood_unknown_unicast_supression, mapped from YANG variable /network_instances/network_instance/fdb/state/flood_unknown_unicast_supression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
Suppression. If the Unknown Unicast Flooding Suppression is on,
the unicast traffic towards an unknown host will be dropped.
    """
    return self.__flood_unknown_unicast_supression
      
  def _set_flood_unknown_unicast_supression(self, v, load=False):
    """
    Setter method for flood_unknown_unicast_supression, mapped from YANG variable /network_instances/network_instance/fdb/state/flood_unknown_unicast_supression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flood_unknown_unicast_supression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flood_unknown_unicast_supression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
Suppression. If the Unknown Unicast Flooding Suppression is on,
the unicast traffic towards an unknown host will be dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flood_unknown_unicast_supression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__flood_unknown_unicast_supression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flood_unknown_unicast_supression(self):
    self.__flood_unknown_unicast_supression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  mac_learning = __builtin__.property(_get_mac_learning)
  mac_aging_time = __builtin__.property(_get_mac_aging_time)
  maximum_entries = __builtin__.property(_get_maximum_entries)
  anycast_gateway_mac = __builtin__.property(_get_anycast_gateway_mac)
  arp_proxy = __builtin__.property(_get_arp_proxy)
  arp_suppression = __builtin__.property(_get_arp_suppression)
  nd_proxy = __builtin__.property(_get_nd_proxy)
  nd_suppression = __builtin__.property(_get_nd_suppression)
  flood_unknown_unicast_supression = __builtin__.property(_get_flood_unknown_unicast_supression)


  _pyangbind_elements = OrderedDict([('mac_learning', mac_learning), ('mac_aging_time', mac_aging_time), ('maximum_entries', maximum_entries), ('anycast_gateway_mac', anycast_gateway_mac), ('arp_proxy', arp_proxy), ('arp_suppression', arp_suppression), ('nd_proxy', nd_proxy), ('nd_suppression', nd_suppression), ('flood_unknown_unicast_supression', flood_unknown_unicast_supression), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/fdb/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the FDB
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_learning','__mac_aging_time','__maximum_entries','__anycast_gateway_mac','__arp_proxy','__arp_suppression','__nd_proxy','__nd_suppression','__flood_unknown_unicast_supression',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_learning = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__mac_aging_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__maximum_entries = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__anycast_gateway_mac = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    self.__arp_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__arp_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__flood_unknown_unicast_supression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'state']

  def _get_mac_learning(self):
    """
    Getter method for mac_learning, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_learning (boolean)

    YANG Description: When this leaf is set to true, MAC learning is enabled for
the network instance, such that MAC addresses are learned
from ingress frames and added to the FDB.
    """
    return self.__mac_learning
      
  def _set_mac_learning(self, v, load=False):
    """
    Setter method for mac_learning, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_learning (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_learning is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_learning() directly.

    YANG Description: When this leaf is set to true, MAC learning is enabled for
the network instance, such that MAC addresses are learned
from ingress frames and added to the FDB.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_learning must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__mac_learning = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_learning(self):
    self.__mac_learning = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_mac_aging_time(self):
    """
    Getter method for mac_aging_time, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_aging_time (uint16)

    YANG Description: The number of seconds of inactivity after which the entry
in the local FDB is timed out.
    """
    return self.__mac_aging_time
      
  def _set_mac_aging_time(self, v, load=False):
    """
    Setter method for mac_aging_time, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_aging_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_aging_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_aging_time() directly.

    YANG Description: The number of seconds of inactivity after which the entry
in the local FDB is timed out.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_aging_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__mac_aging_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_aging_time(self):
    self.__mac_aging_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_maximum_entries(self):
    """
    Getter method for maximum_entries, mapped from YANG variable /network_instances/network_instance/fdb/state/maximum_entries (uint16)

    YANG Description: The maximum number of MAC address entries that should be
accepted into the FDB
    """
    return self.__maximum_entries
      
  def _set_maximum_entries(self, v, load=False):
    """
    Setter method for maximum_entries, mapped from YANG variable /network_instances/network_instance/fdb/state/maximum_entries (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_entries() directly.

    YANG Description: The maximum number of MAC address entries that should be
accepted into the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_entries must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__maximum_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_entries(self):
    self.__maximum_entries = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_anycast_gateway_mac(self):
    """
    Getter method for anycast_gateway_mac, mapped from YANG variable /network_instances/network_instance/fdb/state/anycast_gateway_mac (oc-yang:mac-address)

    YANG Description: Configure the anycast gateway MAC address that all VTEPs
use for the network instance. When a VM sends an Address
Resolution Protocol (ARP) request for the anycast gateway
IP address in a VXLAN virtual network, the VTEP responds
with the configured anycast MAC address.
    """
    return self.__anycast_gateway_mac
      
  def _set_anycast_gateway_mac(self, v, load=False):
    """
    Setter method for anycast_gateway_mac, mapped from YANG variable /network_instances/network_instance/fdb/state/anycast_gateway_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_anycast_gateway_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_anycast_gateway_mac() directly.

    YANG Description: Configure the anycast gateway MAC address that all VTEPs
use for the network instance. When a VM sends an Address
Resolution Protocol (ARP) request for the anycast gateway
IP address in a VXLAN virtual network, the VTEP responds
with the configured anycast MAC address.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """anycast_gateway_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__anycast_gateway_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_anycast_gateway_mac(self):
    self.__anycast_gateway_mac = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)


  def _get_arp_proxy(self):
    """
    Getter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_proxy (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) ARP proxy. If true
a proxy server on the network answers the
Address Resolution Protocol (ARP) queries for an
IP address that is not on that network.
    """
    return self.__arp_proxy
      
  def _set_arp_proxy(self, v, load=False):
    """
    Setter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_proxy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_proxy() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) ARP proxy. If true
a proxy server on the network answers the
Address Resolution Protocol (ARP) queries for an
IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_proxy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__arp_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_proxy(self):
    self.__arp_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_arp_suppression(self):
    """
    Getter method for arp_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) ARP suppression. If true
the  Address Resolution Protocol (ARP) queries for an
IP address that is not on that network are suppressed.
Address Resolution Protocol (ARP) suppression is a
technique used to reduce the amount of ARP broadcast
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__arp_suppression
      
  def _set_arp_suppression(self, v, load=False):
    """
    Setter method for arp_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) ARP suppression. If true
the  Address Resolution Protocol (ARP) queries for an
IP address that is not on that network are suppressed.
Address Resolution Protocol (ARP) suppression is a
technique used to reduce the amount of ARP broadcast
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__arp_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_suppression(self):
    self.__arp_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_proxy(self):
    """
    Getter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_proxy (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    return self.__nd_proxy
      
  def _set_nd_proxy(self, v, load=False):
    """
    Setter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_proxy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_proxy() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_proxy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_proxy(self):
    self.__nd_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_suppression(self):
    """
    Getter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__nd_suppression
      
  def _set_nd_suppression(self, v, load=False):
    """
    Setter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_suppression(self):
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_flood_unknown_unicast_supression(self):
    """
    Getter method for flood_unknown_unicast_supression, mapped from YANG variable /network_instances/network_instance/fdb/state/flood_unknown_unicast_supression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
Suppression. If the Unknown Unicast Flooding Suppression is on,
the unicast traffic towards an unknown host will be dropped.
    """
    return self.__flood_unknown_unicast_supression
      
  def _set_flood_unknown_unicast_supression(self, v, load=False):
    """
    Setter method for flood_unknown_unicast_supression, mapped from YANG variable /network_instances/network_instance/fdb/state/flood_unknown_unicast_supression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flood_unknown_unicast_supression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flood_unknown_unicast_supression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
Suppression. If the Unknown Unicast Flooding Suppression is on,
the unicast traffic towards an unknown host will be dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flood_unknown_unicast_supression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__flood_unknown_unicast_supression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flood_unknown_unicast_supression(self):
    self.__flood_unknown_unicast_supression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  mac_learning = __builtin__.property(_get_mac_learning)
  mac_aging_time = __builtin__.property(_get_mac_aging_time)
  maximum_entries = __builtin__.property(_get_maximum_entries)
  anycast_gateway_mac = __builtin__.property(_get_anycast_gateway_mac)
  arp_proxy = __builtin__.property(_get_arp_proxy)
  arp_suppression = __builtin__.property(_get_arp_suppression)
  nd_proxy = __builtin__.property(_get_nd_proxy)
  nd_suppression = __builtin__.property(_get_nd_suppression)
  flood_unknown_unicast_supression = __builtin__.property(_get_flood_unknown_unicast_supression)


  _pyangbind_elements = OrderedDict([('mac_learning', mac_learning), ('mac_aging_time', mac_aging_time), ('maximum_entries', maximum_entries), ('anycast_gateway_mac', anycast_gateway_mac), ('arp_proxy', arp_proxy), ('arp_suppression', arp_suppression), ('nd_proxy', nd_proxy), ('nd_suppression', nd_suppression), ('flood_unknown_unicast_supression', flood_unknown_unicast_supression), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/fdb/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the FDB
  """
  __slots__ = ('_path_helper', '_extmethods', '__mac_learning','__mac_aging_time','__maximum_entries','__anycast_gateway_mac','__arp_proxy','__arp_suppression','__nd_proxy','__nd_suppression','__flood_unknown_unicast_supression',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mac_learning = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__mac_aging_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__maximum_entries = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    self.__anycast_gateway_mac = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    self.__arp_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__arp_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    self.__flood_unknown_unicast_supression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'fdb', 'state']

  def _get_mac_learning(self):
    """
    Getter method for mac_learning, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_learning (boolean)

    YANG Description: When this leaf is set to true, MAC learning is enabled for
the network instance, such that MAC addresses are learned
from ingress frames and added to the FDB.
    """
    return self.__mac_learning
      
  def _set_mac_learning(self, v, load=False):
    """
    Setter method for mac_learning, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_learning (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_learning is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_learning() directly.

    YANG Description: When this leaf is set to true, MAC learning is enabled for
the network instance, such that MAC addresses are learned
from ingress frames and added to the FDB.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_learning must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__mac_learning = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_learning(self):
    self.__mac_learning = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-learning", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_mac_aging_time(self):
    """
    Getter method for mac_aging_time, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_aging_time (uint16)

    YANG Description: The number of seconds of inactivity after which the entry
in the local FDB is timed out.
    """
    return self.__mac_aging_time
      
  def _set_mac_aging_time(self, v, load=False):
    """
    Setter method for mac_aging_time, mapped from YANG variable /network_instances/network_instance/fdb/state/mac_aging_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_aging_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_aging_time() directly.

    YANG Description: The number of seconds of inactivity after which the entry
in the local FDB is timed out.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_aging_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__mac_aging_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_aging_time(self):
    self.__mac_aging_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-aging-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_maximum_entries(self):
    """
    Getter method for maximum_entries, mapped from YANG variable /network_instances/network_instance/fdb/state/maximum_entries (uint16)

    YANG Description: The maximum number of MAC address entries that should be
accepted into the FDB
    """
    return self.__maximum_entries
      
  def _set_maximum_entries(self, v, load=False):
    """
    Setter method for maximum_entries, mapped from YANG variable /network_instances/network_instance/fdb/state/maximum_entries (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_entries() directly.

    YANG Description: The maximum number of MAC address entries that should be
accepted into the FDB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_entries must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)""",
        })

    self.__maximum_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_entries(self):
    self.__maximum_entries = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint16', is_config=False)


  def _get_anycast_gateway_mac(self):
    """
    Getter method for anycast_gateway_mac, mapped from YANG variable /network_instances/network_instance/fdb/state/anycast_gateway_mac (oc-yang:mac-address)

    YANG Description: Configure the anycast gateway MAC address that all VTEPs
use for the network instance. When a VM sends an Address
Resolution Protocol (ARP) request for the anycast gateway
IP address in a VXLAN virtual network, the VTEP responds
with the configured anycast MAC address.
    """
    return self.__anycast_gateway_mac
      
  def _set_anycast_gateway_mac(self, v, load=False):
    """
    Setter method for anycast_gateway_mac, mapped from YANG variable /network_instances/network_instance/fdb/state/anycast_gateway_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_anycast_gateway_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_anycast_gateway_mac() directly.

    YANG Description: Configure the anycast gateway MAC address that all VTEPs
use for the network instance. When a VM sends an Address
Resolution Protocol (ARP) request for the anycast gateway
IP address in a VXLAN virtual network, the VTEP responds
with the configured anycast MAC address.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """anycast_gateway_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__anycast_gateway_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_anycast_gateway_mac(self):
    self.__anycast_gateway_mac = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="anycast-gateway-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)


  def _get_arp_proxy(self):
    """
    Getter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_proxy (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) ARP proxy. If true
a proxy server on the network answers the
Address Resolution Protocol (ARP) queries for an
IP address that is not on that network.
    """
    return self.__arp_proxy
      
  def _set_arp_proxy(self, v, load=False):
    """
    Setter method for arp_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_proxy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_proxy() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) ARP proxy. If true
a proxy server on the network answers the
Address Resolution Protocol (ARP) queries for an
IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_proxy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__arp_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_proxy(self):
    self.__arp_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_arp_suppression(self):
    """
    Getter method for arp_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) ARP suppression. If true
the  Address Resolution Protocol (ARP) queries for an
IP address that is not on that network are suppressed.
Address Resolution Protocol (ARP) suppression is a
technique used to reduce the amount of ARP broadcast
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__arp_suppression
      
  def _set_arp_suppression(self, v, load=False):
    """
    Setter method for arp_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/arp_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) ARP suppression. If true
the  Address Resolution Protocol (ARP) queries for an
IP address that is not on that network are suppressed.
Address Resolution Protocol (ARP) suppression is a
technique used to reduce the amount of ARP broadcast
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__arp_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_suppression(self):
    self.__arp_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="arp-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_proxy(self):
    """
    Getter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_proxy (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    return self.__nd_proxy
      
  def _set_nd_proxy(self, v, load=False):
    """
    Setter method for nd_proxy, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_proxy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_proxy() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
proxy. If true a proxy server on the network answers the
NDP packets for an IP address that is not on that network.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_proxy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_proxy(self):
    self.__nd_proxy = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_nd_suppression(self):
    """
    Getter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_suppression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    return self.__nd_suppression
      
  def _set_nd_suppression(self, v, load=False):
    """
    Setter method for nd_suppression, mapped from YANG variable /network_instances/network_instance/fdb/state/nd_suppression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd_suppression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd_suppression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
If true the NDP queries for an IP address that is not on that
network are suppressed. NDP suppression is a
technique used to reduce the amount of NDP Packets
flooding within individual VXLAN segments, that is between
VMs connected to the same logical switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd_suppression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__nd_suppression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd_suppression(self):
    self.__nd_suppression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="nd-suppression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)


  def _get_flood_unknown_unicast_supression(self):
    """
    Getter method for flood_unknown_unicast_supression, mapped from YANG variable /network_instances/network_instance/fdb/state/flood_unknown_unicast_supression (boolean)

    YANG Description: Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
Suppression. If the Unknown Unicast Flooding Suppression is on,
the unicast traffic towards an unknown host will be dropped.
    """
    return self.__flood_unknown_unicast_supression
      
  def _set_flood_unknown_unicast_supression(self, v, load=False):
    """
    Setter method for flood_unknown_unicast_supression, mapped from YANG variable /network_instances/network_instance/fdb/state/flood_unknown_unicast_supression (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flood_unknown_unicast_supression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flood_unknown_unicast_supression() directly.

    YANG Description: Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
Suppression. If the Unknown Unicast Flooding Suppression is on,
the unicast traffic towards an unknown host will be dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flood_unknown_unicast_supression must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__flood_unknown_unicast_supression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flood_unknown_unicast_supression(self):
    self.__flood_unknown_unicast_supression = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="flood-unknown-unicast-supression", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  mac_learning = __builtin__.property(_get_mac_learning)
  mac_aging_time = __builtin__.property(_get_mac_aging_time)
  maximum_entries = __builtin__.property(_get_maximum_entries)
  anycast_gateway_mac = __builtin__.property(_get_anycast_gateway_mac)
  arp_proxy = __builtin__.property(_get_arp_proxy)
  arp_suppression = __builtin__.property(_get_arp_suppression)
  nd_proxy = __builtin__.property(_get_nd_proxy)
  nd_suppression = __builtin__.property(_get_nd_suppression)
  flood_unknown_unicast_supression = __builtin__.property(_get_flood_unknown_unicast_supression)


  _pyangbind_elements = OrderedDict([('mac_learning', mac_learning), ('mac_aging_time', mac_aging_time), ('maximum_entries', maximum_entries), ('anycast_gateway_mac', anycast_gateway_mac), ('arp_proxy', arp_proxy), ('arp_suppression', arp_suppression), ('nd_proxy', nd_proxy), ('nd_suppression', nd_suppression), ('flood_unknown_unicast_supression', flood_unknown_unicast_supression), ])


