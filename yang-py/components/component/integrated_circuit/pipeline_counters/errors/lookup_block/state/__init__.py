# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-platform - based on the path /components/component/integrated-circuit/pipeline-counters/errors/lookup-block/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Errors corresponding to the lookup subsystem of the IC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__error_name','__error_count','__error_threshold','__error_action','__error_level',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__error_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="error-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='string', is_config=False)
    self.__error_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__error_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    self.__error_action = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'LOG': {}, 'LINECARD_REBOOT': {}, 'LINECARD_OFFLINE': {}, 'NPU_RESET': {}, 'NPU_OFFLINE': {}, 'GET_DIAGNOSTIC_INFO': {}, 'ALARM': {}},), is_leaf=True, yang_name="error-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='enumeration', is_config=False)
    self.__error_level = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'FATAL': {}, 'MAJOR': {}, 'MINOR': {}, 'INFORMATIONAL': {}},), is_leaf=True, yang_name="error-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['components', 'component', 'integrated-circuit', 'pipeline-counters', 'errors', 'lookup-block', 'state']

  def _get_error_name(self):
    """
    Getter method for error_name, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_name (string)

    YANG Description: Name of the interrupt, hardware error, or software error in the NPU.
    """
    return self.__error_name
      
  def _set_error_name(self, v, load=False):
    """
    Setter method for error_name, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_name() directly.

    YANG Description: Name of the interrupt, hardware error, or software error in the NPU.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="error-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="error-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='string', is_config=False)""",
        })

    self.__error_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_name(self):
    self.__error_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="error-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='string', is_config=False)


  def _get_error_count(self):
    """
    Getter method for error_count, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_count (uint64)

    YANG Description: Number of all the errors.
    """
    return self.__error_count
      
  def _set_error_count(self, v, load=False):
    """
    Setter method for error_count, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_count (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_count() directly.

    YANG Description: Number of all the errors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_count must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__error_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_count(self):
    self.__error_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_error_threshold(self):
    """
    Getter method for error_threshold, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_threshold (uint64)

    YANG Description: Number of errors before recovery action.
    """
    return self.__error_threshold
      
  def _set_error_threshold(self, v, load=False):
    """
    Setter method for error_threshold, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_threshold (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_threshold() directly.

    YANG Description: Number of errors before recovery action.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_threshold must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)""",
        })

    self.__error_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_threshold(self):
    self.__error_threshold = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='uint64', is_config=False)


  def _get_error_action(self):
    """
    Getter method for error_action, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_action (enumeration)

    YANG Description: Error action taken - log, linecard reboot, linecard offline, NPU
reset, NPU offline, gather diagnostic data, raise an alarm.
    """
    return self.__error_action
      
  def _set_error_action(self, v, load=False):
    """
    Setter method for error_action, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_action (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_action() directly.

    YANG Description: Error action taken - log, linecard reboot, linecard offline, NPU
reset, NPU offline, gather diagnostic data, raise an alarm.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'LOG': {}, 'LINECARD_REBOOT': {}, 'LINECARD_OFFLINE': {}, 'NPU_RESET': {}, 'NPU_OFFLINE': {}, 'GET_DIAGNOSTIC_INFO': {}, 'ALARM': {}},), is_leaf=True, yang_name="error-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_action must be of a type compatible with enumeration""",
          'defined-type': "openconfig-platform-pipeline-counters:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'LOG': {}, 'LINECARD_REBOOT': {}, 'LINECARD_OFFLINE': {}, 'NPU_RESET': {}, 'NPU_OFFLINE': {}, 'GET_DIAGNOSTIC_INFO': {}, 'ALARM': {}},), is_leaf=True, yang_name="error-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='enumeration', is_config=False)""",
        })

    self.__error_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_action(self):
    self.__error_action = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'LOG': {}, 'LINECARD_REBOOT': {}, 'LINECARD_OFFLINE': {}, 'NPU_RESET': {}, 'NPU_OFFLINE': {}, 'GET_DIAGNOSTIC_INFO': {}, 'ALARM': {}},), is_leaf=True, yang_name="error-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='enumeration', is_config=False)


  def _get_error_level(self):
    """
    Getter method for error_level, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_level (enumeration)

    YANG Description: Identify the severity of the error - Fatal, Major, Minor, or
Informational.
    """
    return self.__error_level
      
  def _set_error_level(self, v, load=False):
    """
    Setter method for error_level, mapped from YANG variable /components/component/integrated_circuit/pipeline_counters/errors/lookup_block/state/error_level (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_level() directly.

    YANG Description: Identify the severity of the error - Fatal, Major, Minor, or
Informational.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'FATAL': {}, 'MAJOR': {}, 'MINOR': {}, 'INFORMATIONAL': {}},), is_leaf=True, yang_name="error-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_level must be of a type compatible with enumeration""",
          'defined-type': "openconfig-platform-pipeline-counters:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'FATAL': {}, 'MAJOR': {}, 'MINOR': {}, 'INFORMATIONAL': {}},), is_leaf=True, yang_name="error-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='enumeration', is_config=False)""",
        })

    self.__error_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_level(self):
    self.__error_level = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'FATAL': {}, 'MAJOR': {}, 'MINOR': {}, 'INFORMATIONAL': {}},), is_leaf=True, yang_name="error-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/platform-pipeline-counters', defining_module='openconfig-platform-pipeline-counters', yang_type='enumeration', is_config=False)

  error_name = __builtin__.property(_get_error_name)
  error_count = __builtin__.property(_get_error_count)
  error_threshold = __builtin__.property(_get_error_threshold)
  error_action = __builtin__.property(_get_error_action)
  error_level = __builtin__.property(_get_error_level)


  _pyangbind_elements = OrderedDict([('error_name', error_name), ('error_count', error_count), ('error_threshold', error_threshold), ('error_action', error_action), ('error_level', error_level), ])


