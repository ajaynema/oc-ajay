# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-macsec - based on the path /macsec/mka/key-chains/key-chain/mka-keys/mka-key/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration of MKA key
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__key_clear_text','__cryptographic_algorithm','__valid_date_time','__expiration_date_time',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['1..64']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:hex-string', is_config=True)
    self.__key_clear_text = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="key-clear-text", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=True)
    self.__cryptographic_algorithm = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'AES_128_CMAC': {}, 'AES_256_CMAC': {}},), is_leaf=True, yang_name="cryptographic-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='enumeration', is_config=True)
    self.__valid_date_time = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9]{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|([+-]([0-1][0-9]|2[0-3]):[0-5][0-9]))'}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'VALID_IMMEDIATELY': {}},),], default=six.text_type("VALID_IMMEDIATELY"), is_leaf=True, yang_name="valid-date-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='union', is_config=True)
    self.__expiration_date_time = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9]{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|([+-]([0-1][0-9]|2[0-3]):[0-5][0-9]))'}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'NO_EXPIRATION': {}},),], default=six.text_type("NO_EXPIRATION"), is_leaf=True, yang_name="expiration-date-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['macsec', 'mka', 'key-chains', 'key-chain', 'mka-keys', 'mka-key', 'config']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/id (oc-yang:hex-string)

    YANG Description: Key identifier is used as the
Connectivity Association Key name (CKN)
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/id (oc-yang:hex-string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Key identifier is used as the
Connectivity Association Key name (CKN)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['1..64']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:hex-string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with oc-yang:hex-string""",
          'defined-type': "oc-yang:hex-string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['1..64']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:hex-string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9a-fA-F]*'}), restriction_dict={'length': ['1..64']}), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='oc-yang:hex-string', is_config=True)


  def _get_key_clear_text(self):
    """
    Getter method for key_clear_text, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/key_clear_text (string)

    YANG Description: The key, used for signing and encrypting. Supplied as a clear text
string. When read, also returned as clear text string.
    """
    return self.__key_clear_text
      
  def _set_key_clear_text(self, v, load=False):
    """
    Setter method for key_clear_text, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/key_clear_text (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_clear_text is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_clear_text() directly.

    YANG Description: The key, used for signing and encrypting. Supplied as a clear text
string. When read, also returned as clear text string.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="key-clear-text", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_clear_text must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="key-clear-text", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=True)""",
        })

    self.__key_clear_text = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_clear_text(self):
    self.__key_clear_text = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="key-clear-text", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='string', is_config=True)


  def _get_cryptographic_algorithm(self):
    """
    Getter method for cryptographic_algorithm, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/cryptographic_algorithm (enumeration)

    YANG Description: MKA Cryptographic authentication algorithm to use
    """
    return self.__cryptographic_algorithm
      
  def _set_cryptographic_algorithm(self, v, load=False):
    """
    Setter method for cryptographic_algorithm, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/cryptographic_algorithm (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cryptographic_algorithm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cryptographic_algorithm() directly.

    YANG Description: MKA Cryptographic authentication algorithm to use
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'AES_128_CMAC': {}, 'AES_256_CMAC': {}},), is_leaf=True, yang_name="cryptographic-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cryptographic_algorithm must be of a type compatible with enumeration""",
          'defined-type': "openconfig-macsec:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'AES_128_CMAC': {}, 'AES_256_CMAC': {}},), is_leaf=True, yang_name="cryptographic-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='enumeration', is_config=True)""",
        })

    self.__cryptographic_algorithm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cryptographic_algorithm(self):
    self.__cryptographic_algorithm = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'AES_128_CMAC': {}, 'AES_256_CMAC': {}},), is_leaf=True, yang_name="cryptographic-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='enumeration', is_config=True)


  def _get_valid_date_time(self):
    """
    Getter method for valid_date_time, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/valid_date_time (union)

    YANG Description: Date and time the key starts being valid according to local date and
time configuration.
    """
    return self.__valid_date_time
      
  def _set_valid_date_time(self, v, load=False):
    """
    Setter method for valid_date_time, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/valid_date_time (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_valid_date_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_valid_date_time() directly.

    YANG Description: Date and time the key starts being valid according to local date and
time configuration.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9]{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|([+-]([0-1][0-9]|2[0-3]):[0-5][0-9]))'}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'VALID_IMMEDIATELY': {}},),], default=six.text_type("VALID_IMMEDIATELY"), is_leaf=True, yang_name="valid-date-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """valid_date_time must be of a type compatible with union""",
          'defined-type': "openconfig-macsec:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9]{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|([+-]([0-1][0-9]|2[0-3]):[0-5][0-9]))'}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'VALID_IMMEDIATELY': {}},),], default=six.text_type("VALID_IMMEDIATELY"), is_leaf=True, yang_name="valid-date-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='union', is_config=True)""",
        })

    self.__valid_date_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_valid_date_time(self):
    self.__valid_date_time = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9]{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|([+-]([0-1][0-9]|2[0-3]):[0-5][0-9]))'}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'VALID_IMMEDIATELY': {}},),], default=six.text_type("VALID_IMMEDIATELY"), is_leaf=True, yang_name="valid-date-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='union', is_config=True)


  def _get_expiration_date_time(self):
    """
    Getter method for expiration_date_time, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/expiration_date_time (union)

    YANG Description: Key date and time expiration according to local date and time
configuration.
    """
    return self.__expiration_date_time
      
  def _set_expiration_date_time(self, v, load=False):
    """
    Setter method for expiration_date_time, mapped from YANG variable /macsec/mka/key_chains/key_chain/mka_keys/mka_key/config/expiration_date_time (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_expiration_date_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_expiration_date_time() directly.

    YANG Description: Key date and time expiration according to local date and time
configuration.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9]{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|([+-]([0-1][0-9]|2[0-3]):[0-5][0-9]))'}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'NO_EXPIRATION': {}},),], default=six.text_type("NO_EXPIRATION"), is_leaf=True, yang_name="expiration-date-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """expiration_date_time must be of a type compatible with union""",
          'defined-type': "openconfig-macsec:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9]{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|([+-]([0-1][0-9]|2[0-3]):[0-5][0-9]))'}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'NO_EXPIRATION': {}},),], default=six.text_type("NO_EXPIRATION"), is_leaf=True, yang_name="expiration-date-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='union', is_config=True)""",
        })

    self.__expiration_date_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_expiration_date_time(self):
    self.__expiration_date_time = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '[0-9]{4}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|([+-]([0-1][0-9]|2[0-3]):[0-5][0-9]))'}),RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={'NO_EXPIRATION': {}},),], default=six.text_type("NO_EXPIRATION"), is_leaf=True, yang_name="expiration-date-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/macsec', defining_module='openconfig-macsec', yang_type='union', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  key_clear_text = __builtin__.property(_get_key_clear_text, _set_key_clear_text)
  cryptographic_algorithm = __builtin__.property(_get_cryptographic_algorithm, _set_cryptographic_algorithm)
  valid_date_time = __builtin__.property(_get_valid_date_time, _set_valid_date_time)
  expiration_date_time = __builtin__.property(_get_expiration_date_time, _set_expiration_date_time)


  _pyangbind_elements = OrderedDict([('id', id), ('key_clear_text', key_clear_text), ('cryptographic_algorithm', cryptographic_algorithm), ('valid_date_time', valid_date_time), ('expiration_date_time', expiration_date_time), ])


